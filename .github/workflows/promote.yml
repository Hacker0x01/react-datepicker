name: Promote Environment

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Deployment to perform: (develop to stage, stage to preprod, preprod to prod)'
        required: true
        default: 'develop to stage'

jobs:
  pr:
    name: Automate PR
    if: contains(fromJSON('["develop to stage", "stage to preprod", "preprod to prod"]'), github.event.inputs.env)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: .github/common/set-env-vars.sh

      - name: Create PR
        id: create
        uses: actions/github-script@v6
        env:
          operation: ${{ github.event.inputs.env }}
        with:
          github-token: ${{ secrets.CI_BOT_GH_TOKEN }}
          script: |
            const { operation, VERSION } = process.env;
            const [head] = operation.split(' ');
            const branches = ['develop', 'stage', 'preprod', 'master'];
            const base = branches[branches.indexOf(head)+1];
            const title = base === 'master'
              ? `chore: Release v${VERSION} to production`
              : `chore: Promote ${head} branch to ${base}`

            const { data: { node_id: id, number } } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head,
              base,
            });
            return { id, number, headline: `"${title} (#${number})"` };

      - name: Set PR as auto-mergeable # This requires auto-merge to be enabled in the repo
        id: auto-merge
        continue-on-error: true
        uses: octokit/graphql-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.CI_BOT_GH_TOKEN }}
        with:
          query: |
            mutation($pullid: ID!, $headline: String) {
              enablePullRequestAutoMerge(input: {
                pullRequestId: $pullid,
                commitHeadline: $headline
              }) {
                clientMutationId
              }
            }
          pullid: ${{ fromJSON(steps.create.outputs.result).id }}
          headline: ${{ fromJSON(steps.create.outputs.result).headline }}

      - name: Close PR if auto-merge setup fails
        uses: actions/github-script@v6
        if: steps.auto-merge.outcome == 'failure'
        env:
          prNumber: ${{ fromJSON(steps.create.outputs.result).number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { prNumber } = process.env;
            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber),
              state: 'closed',
            });

      - name: Fail Job if auto-merge setup fails
        if: steps.auto-merge.outcome == 'failure'
        run: echo "Auto-merge could not be enabled. Aborting" && exit 1
